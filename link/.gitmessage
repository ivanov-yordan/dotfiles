# Topic
[flag]<type> <summary>

# Body
<body>

# Footer:
<relation> <issue_key>

# Topic:
# Most importantly, describe what is changed with the commit and not what has
# not been working (that is part of the bug report already).
# Keep the whole line below 50 characters if possible, but below 80 in any case.

# [flag]
# Possible flags are:
# * [!!!]: Breaking change.
# * [WIP]: Work In Progress. Changes marked WIP are never merged.
# * [SECURITY]: Visualizes that a change fixes a security issue.

# <type>
# Type should be one of the following:
# * [FEATURE]: A new feature is introduced.
# * [BUGFIX]: A fix for a bug.
# * [REFACTOR]: Refactoring production code.
# * [DOCS]: Changes to documentation.
# * [STYLE]: Formatting, missing semi colons, etc.
# * [TEST]: Adding missing tests, refactoring tests.
# * [CHORE]: Updating build tasks etc.

# <summary>
# Summarize the changes introduced with this commit.
# Write your commit message in the '''imperative present tense'''
# ("Fix bug", not "Fixed bug"). This convention matches up with generated
# commit messages by commands like git merge and git revert.
# Help others to understand what you did (Motivation for the change?
# Whats the difference to the previous version?), but keep it simple.

# <body>
# Problem description as well as testing and/or reproduction instructions
# shall be part of the ticket referenced below.
# Wrap at 80 characters.

# Footer:
# Bug tracking related information

# <relation>
# One of the following:
# * Related: This commit is related with an issue
# * Resolve: This commit resolves an issue

# <issue_key>
# ID of the related bug.